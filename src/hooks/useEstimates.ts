import { useState, useCallback, useMemo, useEffect } from 'react';
import { Estimate, Item, LibraryItem, CalculationResults, EstimateStatus, EstimateTemplate } from '../types';
import { supabase } from '../supabaseClient';
import { generateNewEstimateNumber } from '../utils';
import type { Session } from '@supabase/supabase-js';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
const transformSupabaseData = (data: any[] | null) => {
  console.log('üîß transformSupabaseData: –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', data);
  console.log('üîß transformSupabaseData: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ—Ç:', data?.length || 0);
  
  const transformed = (data || []).map((estimate, index) => {
    console.log(`üîß transformSupabaseData: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ—Ç—É ${index + 1}:`, estimate);
    console.log(`üîß transformSupabaseData: estimate_items –¥–ª—è —Å–º–µ—Ç—ã ${index + 1}:`, estimate.estimate_items);
    
    const transformedEstimate = {
      ...estimate,
      items: estimate.estimate_items || [],
      clientInfo: estimate.client_info || '',
      number: estimate.number || '',
      date: estimate.date || new Date().toISOString(),
      discountType: estimate.discount_type || 'percent',
      createdAt: estimate.created_at || new Date().toISOString(),
      updatedAt: estimate.updated_at || new Date().toISOString()
    };
    
    console.log(`üîß transformSupabaseData: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è —Å–º–µ—Ç–∞ ${index + 1}:`, transformedEstimate);
    console.log(`üîß transformSupabaseData: items –≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–π —Å–º–µ—Ç–µ ${index + 1}:`, transformedEstimate.items);
    
    return transformedEstimate;
  });
  
  console.log('üîß transformSupabaseData: –≤—Å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', transformed);
  return transformed;
};

export const useEstimates = (session: Session | null) => {
  console.log('üìä useEstimates: –•—É–∫ useEstimates –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è');
  const [allEstimates, setAllEstimates] = useState<Estimate[]>([]);
  const [currentEstimate, setCurrentEstimate] = useState<Estimate | null>(null);
  const [clientInfo, setClientInfo] = useState('');
  const [estimateNumber, setEstimateNumber] = useState('');
  const [estimateDate, setEstimateDate] = useState(new Date().toISOString().split('T')[0]);
  const [items, setItems] = useState<Item[]>([]);
  const [discount, setDiscount] = useState(0);
  const [discountType, setDiscountType] = useState<'percent' | 'fixed'>('percent');
  const [tax, setTax] = useState(0);
  const [status, setStatus] = useState<EstimateStatus>('draft');
  const [templates, setTemplates] = useState<EstimateTemplate[]>([]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const savedTemplates = localStorage.getItem('estimateTemplates');
    if (savedTemplates) {
      try {
        setTemplates(JSON.parse(savedTemplates));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤:', error);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem('estimateTemplates', JSON.stringify(templates));
  }, [templates]);

  const calculation = useMemo((): CalculationResults => {
    const materialsTotal = items
        .filter(item => item.type === 'material')
        .reduce((sum, item) => sum + (item.quantity * item.price), 0);
    const workTotal = items
        .filter(item => item.type === 'work')
        .reduce((sum, item) => sum + (item.quantity * item.price), 0);
    const subtotal = materialsTotal + workTotal;
    const discountAmount = discountType === 'percent' 
        ? subtotal * (discount / 100)
        : discount;
    const totalAfterDiscount = subtotal - discountAmount;
    const taxAmount = totalAfterDiscount * (tax / 100);
    const grandTotal = totalAfterDiscount + taxAmount;
    return {
        subtotal,
        materialsTotal,
        workTotal,
        discountAmount,
        taxAmount,
        grandTotal
    };
  }, [items, discount, discountType, tax]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    console.log('useEffect —Å—Ä–∞–±–æ—Ç–∞–ª, session:', session);
    const loadEstimates = async () => {
      if (session?.user) {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', session.user.id);
        const { data, error } = await supabase
          .from('estimates')
          .select(`
            *,
            estimate_items (
              id, name, quantity, price, unit, image_url, type, estimate_id
            )
          `)
          .eq('user_id', session.user.id);
        
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ—Ç:', error);
        } else {
          console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–º–µ—Ç:', data?.length || 0, data);
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
          const transformedData = transformSupabaseData(data);
          
          console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', transformedData);
          setAllEstimates(transformedData);
        }
      } else {
        console.log('Session –∏–ª–∏ user –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      }
    };

    loadEstimates();
  }, [session?.user]);

  const createNewEstimate = (projectIdOrObject: string | { projectId: string } | null = null) => {
    let finalProjectId: string | null = null;

    console.log('createNewEstimate –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:', projectIdOrObject, '—Ç–∏–ø:', typeof projectIdOrObject);

    // "–£–º–Ω–∞—è" –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—à–ª–∏ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if (typeof projectIdOrObject === 'string') {
      finalProjectId = projectIdOrObject;
      console.log('projectId –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞:', finalProjectId);
    } else if (projectIdOrObject && typeof projectIdOrObject === 'object' && 'projectId' in projectIdOrObject) {
      finalProjectId = projectIdOrObject.projectId;
      console.log('projectId –∏–∑ –æ–±—ä–µ–∫—Ç–∞:', finalProjectId);
    } else {
      console.log('projectId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º null');
    }

    const newTempId = `temp-${crypto.randomUUID()}`;
    const newEstimate: Estimate = {
      id: newTempId,
      project_id: finalProjectId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π projectId
      user_id: session?.user?.id || '',
      items: [],
      number: generateNewEstimateNumber(allEstimates),
      date: new Date().toISOString(),
      status: 'draft',
      clientInfo: '',
      discount: 0,
      discountType: 'percent',
      tax: 0,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    setCurrentEstimate(newEstimate);
    setItems(newEstimate.items);
    setClientInfo(newEstimate.clientInfo || '');
    setEstimateNumber(newEstimate.number);
    setEstimateDate(new Date(newEstimate.date).toISOString().split('T')[0]);
    setDiscount(newEstimate.discount);
    setDiscountType(newEstimate.discountType);
    setTax(newEstimate.tax);
    setStatus(newEstimate.status);
    return newEstimate;
  };

  const loadEstimate = (estimateId: string, projectId?: string | null, setIsDirty?: (value: boolean) => void) => {
    console.log('üîß loadEstimate: –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–º–µ—Ç—ã', estimateId);
    console.log('üîß loadEstimate: allEstimates:', allEstimates);
    console.log('üîß loadEstimate: allEstimates.length:', allEstimates.length);
    
    const estimateToLoad = allEstimates.find(e => e.id === estimateId);
    console.log('üîß loadEstimate: –Ω–∞–π–¥–µ–Ω–∞ —Å–º–µ—Ç–∞:', estimateToLoad);
    
    if (estimateToLoad) {
      console.log('üîß loadEstimate: –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–º–µ—Ç—ã:', JSON.stringify(estimateToLoad, null, 2));
      console.log('üîß loadEstimate: items —Å–º–µ—Ç—ã:', estimateToLoad.items);
      console.log('üîß loadEstimate: items —Ç–∏–ø:', typeof estimateToLoad.items);
      console.log('üîß loadEstimate: items –º–∞—Å—Å–∏–≤?', Array.isArray(estimateToLoad.items));
      console.log('üîß loadEstimate: items.length:', estimateToLoad.items?.length || 0);
      
      if (estimateToLoad.items && estimateToLoad.items.length > 0) {
        console.log('üîß loadEstimate: –ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:', estimateToLoad.items[0]);
        console.log('üîß loadEstimate: –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏:', estimateToLoad.items.map((item, index) => ({ index, item })));
      } else {
        console.log('üîß loadEstimate: –í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–∑–∏—Ü–∏–∏ —Å–º–µ—Ç—ã –ø—É—Å—Ç—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–º–µ—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º project_id, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
      const updatedEstimate = projectId !== undefined 
        ? { ...estimateToLoad, project_id: projectId }
        : estimateToLoad;
      
      console.log('üîß loadEstimate: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentEstimate:', updatedEstimate);
      setCurrentEstimate(updatedEstimate);
      
      console.log('üîß loadEstimate: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º items:', estimateToLoad.items);
      console.log('üîß loadEstimate: items.length –ø–µ—Ä–µ–¥ setItems:', estimateToLoad.items?.length || 0);
      setItems(estimateToLoad.items || []);
      console.log('üîß loadEstimate: setItems –≤—ã–∑–≤–∞–Ω');
      
      console.log('üîß loadEstimate: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º clientInfo:', estimateToLoad.clientInfo);
      setClientInfo(estimateToLoad.clientInfo || '');
      
      console.log('üîß loadEstimate: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º estimateNumber:', estimateToLoad.number);
      setEstimateNumber(estimateToLoad.number || '');
      
      console.log('üîß loadEstimate: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º estimateDate:', estimateToLoad.date);
      setEstimateDate(new Date(estimateToLoad.date).toISOString().split('T')[0]);
      
      console.log('üîß loadEstimate: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º discount:', estimateToLoad.discount);
      setDiscount(estimateToLoad.discount);
      
      console.log('üîß loadEstimate: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º discountType:', estimateToLoad.discountType);
      setDiscountType(estimateToLoad.discountType);
      
      console.log('üîß loadEstimate: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tax:', estimateToLoad.tax);
      setTax(estimateToLoad.tax);
      
      console.log('üîß loadEstimate: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º status:', estimateToLoad.status);
      setStatus(estimateToLoad.status);
      
      // –ï—Å–ª–∏ project_id –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–≥—Ä—è–∑–Ω—É—é" –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      console.log('loadEstimate: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ project_id:', {
        projectId,
        originalProjectId: estimateToLoad.project_id,
        isDifferent: projectId !== undefined && projectId !== estimateToLoad.project_id,
        setIsDirtyExists: !!setIsDirty
      });
      
      if (projectId !== undefined && projectId !== estimateToLoad.project_id && setIsDirty) {
        setIsDirty(true);
        console.log('loadEstimate: —Å–º–µ—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –Ω–æ–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      } else {
        console.log('loadEstimate: project_id –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ setIsDirty –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      }
      
      console.log('loadEstimate: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–º–µ—Ç–∞', estimateId, '–¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞', projectId);
    } else {
      console.error('loadEstimate: —Å–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', estimateId);
    }
  };

  const saveCurrentEstimate = async () => {
    console.log("--- –ó–∞–ø—É—Å–∫ saveCurrentEstimate ---");
    if (!currentEstimate || !session?.user) {
      console.error("–û–®–ò–ë–ö–ê: –ù–µ—Ç currentEstimate –∏–ª–∏ —Å–µ—Å—Å–∏–∏!");
      return;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    const estimateWithLatestData = {
      ...currentEstimate,
      items: items, // <-- –°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ: –±–µ—Ä–µ–º —Å–≤–µ–∂–∏–µ items –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
      clientInfo: clientInfo,
      number: estimateNumber,
      date: estimateDate,
      discount: discount,
      discountType: discountType,
      tax: tax,
      // –î–æ–±–∞–≤—å –∑–¥–µ—Å—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    };

    console.log("–°–æ—Ö—Ä–∞–Ω—è–µ–º–∞—è —Å–º–µ—Ç–∞ (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ):", currentEstimate);
    console.log("–°–æ—Ö—Ä–∞–Ω—è–µ–º–∞—è —Å–º–µ—Ç–∞ (—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏):", estimateWithLatestData);

    const isNew = estimateWithLatestData.id.startsWith('temp-');
    console.log('üîß saveCurrentEstimate: isNew:', isNew);
    
    console.log('üîß saveCurrentEstimate: estimateWithLatestData.items:', estimateWithLatestData.items);
    console.log('üîß saveCurrentEstimate: estimateWithLatestData.items.length:', estimateWithLatestData.items?.length || 0);
    console.log('üîß saveCurrentEstimate: items (—Å–æ—Å—Ç–æ—è–Ω–∏–µ):', items);
    console.log('üîß saveCurrentEstimate: items.length (—Å–æ—Å—Ç–æ—è–Ω–∏–µ):', items.length);
    
    if (estimateWithLatestData.items && estimateWithLatestData.items.length > 0) {
      console.log('üîß saveCurrentEstimate: –ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–∑ estimateWithLatestData:', estimateWithLatestData.items[0]);
      console.log('üîß saveCurrentEstimate: –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ estimateWithLatestData:', estimateWithLatestData.items.map((item, index) => ({ index, item })));
    } else {
      console.log('üîß saveCurrentEstimate: –í–ù–ò–ú–ê–ù–ò–ï! estimateWithLatestData.items –ø—É—Å—Ç!');
    }
    
    if (items.length > 0) {
      console.log('üîß saveCurrentEstimate: –ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–∑ items:', items[0]);
      console.log('üîß saveCurrentEstimate: –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ items:', items.map((item, index) => ({ index, item })));
    } else {
      console.log('üîß saveCurrentEstimate: –í–ù–ò–ú–ê–ù–ò–ï! items (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) –ø—É—Å—Ç!');
    }
    
    console.log('üîß saveCurrentEstimate: estimateWithLatestData.project_id =', estimateWithLatestData.project_id, '—Ç–∏–ø:', typeof estimateWithLatestData.project_id);
    
    const estimateData = {
      project_id: estimateWithLatestData.project_id,
      client_info: estimateWithLatestData.clientInfo,
      number: estimateWithLatestData.number,
      date: estimateWithLatestData.date,
      status: status,
      discount: estimateWithLatestData.discount,
      discount_type: estimateWithLatestData.discountType,
      tax: estimateWithLatestData.tax,
      user_id: session.user.id,
    };

    console.log('üîß saveCurrentEstimate: estimateData =', estimateData);

    let estimateId = estimateWithLatestData.id;

    if (isNew) {
      console.log("–†–ï–ñ–ò–ú: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã.");
      console.log('üîß saveCurrentEstimate: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ—Ç—É –≤ –ë–î');
      const { data: newDbEstimate, error } = await supabase
        .from('estimates')
        .insert(estimateData)
        .select()
        .single();

      if (error) { 
        console.error("üîß saveCurrentEstimate: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã:", error); 
        return; 
      }
      
      console.log('üîß saveCurrentEstimate: —Å–º–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, ID:', newDbEstimate.id);
      estimateId = newDbEstimate.id;
      console.log(`–°–º–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, ID: ${estimateId}. –ì–æ—Ç–æ–≤–∏–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.`);

      // --- –í–ê–ñ–ù–ê–Ø –ß–ê–°–¢–¨ ---
      if (estimateWithLatestData.items && estimateWithLatestData.items.length > 0) {
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${estimateWithLatestData.items.length} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.`);
        const itemsToInsert = estimateWithLatestData.items.map(({ id, image, ...item }) => ({
          ...item, // –≤—Å–µ –ø–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏: name, quantity, price, unit, etc.
          image_url: image, // <-- –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'image_url'
          estimate_id: newDbEstimate.id // ID —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–º–µ—Ç—ã
          // –ù–ï –≤–∫–ª—é—á–∞–µ–º id - Supabase —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç
        }));
        
        console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ estimate_items:", itemsToInsert);
        console.log('üîß saveCurrentEstimate: itemsToInsert –¥–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã:', itemsToInsert);
        console.log('üîß saveCurrentEstimate: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', itemsToInsert.length);
        console.log('üîß saveCurrentEstimate: –ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', itemsToInsert[0]);
        
        console.log('üîß saveCurrentEstimate: –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ estimate_items');
        const { error: itemsError } = await supabase.from('estimate_items').insert(itemsToInsert);
        
        if (itemsError) {
          console.error("!!! –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π:", itemsError);
          console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π:", itemsError);
          // –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫–∞—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–º–µ—Ç—ã
        } else {
          console.log("–£–°–ü–ï–•: –ü–æ–∑–∏—Ü–∏–∏ —Å–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
          console.log('üîß saveCurrentEstimate: –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã');
        }
      } else {
        console.log("–í —Å–º–µ—Ç–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");
        console.log('üîß saveCurrentEstimate: –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ç (estimateWithLatestData.items –ø—É—Å—Ç)');
      }

    } else {
      // --- –õ–û–ì–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø ---
      console.log("–†–ï–ñ–ò–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã.");
      console.log('üîß saveCurrentEstimate: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–º–µ—Ç—É');
      const { error } = await supabase
        .from('estimates')
        .update(estimateData)
        .eq('id', estimateWithLatestData.id);

      if (error) { 
        console.error("üîß saveCurrentEstimate: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã:", error); 
        return; 
      }

      console.log('üîß saveCurrentEstimate: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏');
      await supabase.from('estimate_items').delete().eq('estimate_id', estimateWithLatestData.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ estimateWithLatestData
      if (estimateWithLatestData.items && estimateWithLatestData.items.length > 0) {
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${estimateWithLatestData.items.length} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.`);
        const itemsToInsert = estimateWithLatestData.items.map(({ id, image, ...item }) => ({
          ...item, // –≤—Å–µ –ø–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏: name, quantity, price, unit, etc.
          image_url: image, // <-- –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'image_url'
          estimate_id: estimateWithLatestData.id // ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã
          // –ù–ï –≤–∫–ª—é—á–∞–µ–º id - Supabase —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç
        }));
        
        console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ estimate_items (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ):", itemsToInsert);
        console.log('üîß saveCurrentEstimate: itemsToInsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', itemsToInsert);
        console.log('üîß saveCurrentEstimate: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', itemsToInsert.length);
        console.log('üîß saveCurrentEstimate: –ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', itemsToInsert[0]);
        
        console.log('üîß saveCurrentEstimate: –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏');
        const { error: itemsError } = await supabase.from('estimate_items').insert(itemsToInsert);
        
        if (itemsError) {
          console.error("!!! –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ):", itemsError);
          console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π:", itemsError);
        } else {
          console.log("–£–°–ü–ï–•: –ü–æ–∑–∏—Ü–∏–∏ —Å–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
          console.log('üîß saveCurrentEstimate: –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã');
        }
      } else {
        console.log("–í —Å–º–µ—Ç–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
        console.log('üîß saveCurrentEstimate: –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ç (estimateWithLatestData.items –ø—É—Å—Ç)');
      }
    }

    console.log("--- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–º–µ—Ç—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---");
    const { data } = await supabase.from('estimates').select(`
      *,
      estimate_items (
        id, name, quantity, price, unit, image_url, type, estimate_id
      )
    `);
    console.log('–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å–º–µ—Ç:', data?.length || 0, data);
    
    if (data && data.length > 0) {
      console.log('–ü–µ—Ä–≤–∞—è —Å–º–µ—Ç–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', data[0]);
      console.log('–ü–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', data[0].estimate_items);
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç–µ:', data[0].estimate_items?.length || 0);
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const transformedData = transformSupabaseData(data);
    console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', transformedData);
    
    setAllEstimates(transformedData);
    
    // After saving, load the definitive version from the server
    const savedEstimate = transformedData.find(e => e.id === estimateId);
    if(savedEstimate) {
      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–º–µ—Ç—É –≤ currentEstimate:', savedEstimate);
      setCurrentEstimate(savedEstimate);
    } else {
      console.error('–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–º–µ—Ç—É —Å ID:', estimateId);
    }
    
    console.log("--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ saveCurrentEstimate ---");
  };

  const addItem = useCallback(() => {
    const newItem: Item = {
        id: `temp-item-${Date.now()}`,
        name: '',
        quantity: 1,
        price: 0,
        unit: '—à—Ç',
        image: null,
        type: 'work'
    };
    setItems(prev => [...prev, newItem]);
  }, []);

  const updateItem = useCallback((id: string, field: keyof Item, value: string | number) => {
      setItems(prev => prev.map(item => 
          item.id === id ? { ...item, [field]: value } : item
      ));
  }, []);

  const removeItem = useCallback((id: string) => {
      setItems(prev => prev.filter(item => item.id !== id));
  }, []);

  const getEstimatesByProject = useCallback((projectId: string) => {
    console.log('getEstimatesByProject –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è projectId:', projectId);
    console.log('allEstimates:', allEstimates);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    if (allEstimates.length > 0) {
      console.log('–ü–µ—Ä–≤–∞—è —Å–º–µ—Ç–∞:', allEstimates[0]);
      console.log('–ü–æ–ª—è –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç—ã:', Object.keys(allEstimates[0]));
      console.log('projectId –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç—ã:', allEstimates[0].project_id);
      console.log('project_id –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç—ã:', allEstimates[0].project_id);
    }
    
    const filtered = allEstimates.filter(e => e.project_id === projectId);
    console.log('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã:', filtered);
    return filtered;
  }, [allEstimates]);

  const getCurrentEstimateProjectId = useCallback(() => {
    return currentEstimate?.project_id || null;
  }, [currentEstimate]);

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è setEstimates —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
  const setEstimatesWithTransform = useCallback((data: any[]) => {
    console.log('üîß setEstimatesWithTransform: –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', data);
    console.log('üîß setEstimatesWithTransform: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ—Ç:', data?.length || 0);
    
    if (data && data.length > 0) {
      console.log('üîß setEstimatesWithTransform: –ø–µ—Ä–≤–∞—è —Å–º–µ—Ç–∞:', data[0]);
      console.log('üîß setEstimatesWithTransform: estimate_items –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç—ã:', data[0].estimate_items);
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const transformedData = transformSupabaseData(data);
    console.log('üîß setEstimatesWithTransform: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', transformedData);
    
    setAllEstimates(transformedData);
    console.log('üîß setEstimatesWithTransform: setAllEstimates –≤—ã–∑–≤–∞–Ω');
  }, []);

  return {
    estimates: allEstimates,
    setEstimates: setEstimatesWithTransform,
    currentEstimate,
    createNewEstimate,
    loadEstimate,
    saveEstimate: saveCurrentEstimate,
    getEstimatesByProject,
    getCurrentEstimateProjectId,
    clientInfo, setClientInfo,
    estimateNumber, setEstimateNumber,
    estimateDate, setEstimateDate,
    items, setItems,
    discount, setDiscount,
    discountType, setDiscountType,
    tax, setTax,
    status, setStatus,
    calculation,
    addItem,
    updateItem,
    removeItem,
    // Need to re-implement these later if needed
    deleteEstimate: async (id: string) => {
        await supabase.from('estimates').delete().eq('id', id);
        const { data } = await supabase.from('estimates').select(`
          *,
          estimate_items (
            id, name, quantity, price, unit, image_url, type, estimate_id
          )
        `);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const transformedData = transformSupabaseData(data);
        
        setAllEstimates(transformedData);
    },
    updateEstimateStatus: async (id: string, newStatus: EstimateStatus) => {
        await supabase.from('estimates').update({ status: newStatus }).eq('id', id);
        const { data } = await supabase.from('estimates').select(`
          *,
          estimate_items (
            id, name, quantity, price, unit, image_url, type, estimate_id
          )
        `);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const transformedData = transformSupabaseData(data);
        
        setAllEstimates(transformedData);
    },
    templates,
    deleteTemplate: (timestamp: number) => {
      setTemplates(prev => prev.filter(t => t.lastModified !== timestamp));
    },
    saveAsTemplate: (estimateId: string) => {
      console.log('üîß useEstimates: saveAsTemplate –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è estimateId:', estimateId);
      console.log('üîß useEstimates: allEstimates.length:', allEstimates.length);
      console.log('üîß useEstimates: allEstimates:', allEstimates);
      
      const estimate = allEstimates.find(e => e.id === estimateId);
      console.log('üîß useEstimates: –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Å–º–µ—Ç–∞:', estimate);
      
      if (estimate) {
        const template: EstimateTemplate = {
          items: estimate.items || [],
          discount: estimate.discount,
          discountType: estimate.discountType,
          tax: estimate.tax,
          lastModified: Date.now()
        };
        console.log('üîß useEstimates: —Å–æ–∑–¥–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:', template);
        console.log('üîß useEstimates: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ —à–∞–±–ª–æ–Ω–µ:', template.items.length);
        
        setTemplates(prev => {
          const newTemplates = [template, ...prev];
          console.log('üîß useEstimates: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:', newTemplates);
          console.log('üîß useEstimates: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', newTemplates.length);
          return newTemplates;
        });
        
        console.log('üîß useEstimates: –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      } else {
        console.error('üîß useEstimates: –û–®–ò–ë–ö–ê - —Å–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ID:', estimateId);
      }
    },
    addItemFromLibrary: () => {},
    addItemsFromAI: () => {},
    updateItemImage: () => {},
    reorderItems: () => {},
    fetchAllEstimates: useCallback(async () => {
      try {
        console.log('üîß useEstimates: fetchAllEstimates –∑–∞–ø—É—â–µ–Ω');
        const { data, error } = await supabase
          .from('estimates')
          .select(`
            *,
            estimate_items (
              id,
              name,
              quantity,
              price,
              unit,
              image_url, 
              type,
              estimate_id
            )
          `);

        if (error) {
          console.error('üîß useEstimates: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ—Ç:', error);
          return;
        }
        
        console.log('üîß useEstimates: fetchAllEstimates —É—Å–ø–µ—à–Ω–æ, –¥–∞–Ω–Ω—ã–µ:', data);
        console.log('üîß useEstimates: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ—Ç:', data?.length || 0);
        
        if (data && data.length > 0) {
          console.log('üîß useEstimates: –ø–µ—Ä–≤–∞—è —Å–º–µ—Ç–∞:', data[0]);
          console.log('üîß useEstimates: estimate_items –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç—ã:', data[0].estimate_items);
          console.log('üîß useEstimates: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç–µ:', data[0].estimate_items?.length || 0);
          
          if (data[0].estimate_items && data[0].estimate_items.length > 0) {
            console.log('üîß useEstimates: –ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç—ã:', data[0].estimate_items[0]);
          }
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const transformedData = transformSupabaseData(data);
        console.log('üîß useEstimates: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', transformedData);
        
        setAllEstimates(transformedData);
        console.log('üîß useEstimates: setAllEstimates –≤—ã–∑–≤–∞–Ω');
      } catch (error) {
        console.error('üîß useEstimates: –û—à–∏–±–∫–∞ –≤ fetchAllEstimates:', error);
      }
    }, []), // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  };
};