import type { BookingData } from '../types/booking';

const DEFAULT_BACKEND_URL = 'https://api.prorab360.online/notify';
const backendUrl = import.meta.env.VITE_BACKEND_URL || DEFAULT_BACKEND_URL;

console.log('üîß Backend URL –∑–∞–≥—Ä—É–∂–µ–Ω:', backendUrl);
console.log('üîß –í—Å–µ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', import.meta.env);

if (!import.meta.env.VITE_BACKEND_URL) {
  console.warn('‚ö†Ô∏è VITE_BACKEND_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback:', backendUrl);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
 * @param payload - –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
 * @returns Promise —Å –æ—Ç–≤–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
 * @throws Error –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏ –∏–ª–∏ –±—ç–∫–µ–Ω–¥–∞
 */
export async function sendBookingNotifications(
  payload: BookingData
): Promise<any> {
  console.log('');
  console.log('üîî'.repeat(40));
  console.log('üì§ –ù–ê–ß–ê–õ–û –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø');
  console.log('üîî'.repeat(40));
  console.log('üìç URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:', backendUrl);
  console.log('üì¶ –ü–æ–ª–Ω—ã–π payload:', JSON.stringify(payload, null, 2));
  console.log('üì¶ –î–µ—Ç–∞–ª–∏ payload:');
  console.log('   - masterId:', payload.masterId);
  console.log('   - clientTelegramId:', payload.clientTelegramId);
  console.log('   - clientName:', payload.clientName);
  console.log('   - clientPhone:', payload.clientPhone);
  console.log('   - serviceId:', payload.serviceId);
  console.log('   - dateTime:', payload.dateTime);
  console.log('   - masterName:', payload.masterName);
  console.log('   - notificationType:', payload.notificationType);
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
  const controller = new AbortController();
  const timeoutId = setTimeout(() => {
    console.error('‚è±Ô∏è –¢–ê–ô–ú–ê–£–¢! –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 10 —Å–µ–∫—É–Ω–¥');
    controller.abort();
  }, 10000); // 10 —Å–µ–∫—É–Ω–¥
  
  try {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ fetch –∑–∞–ø—Ä–æ—Å–∞...');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const isReminder = payload.notificationType === 'reminder';
    // backendUrl –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ /notify
    // –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞–º–µ–Ω—è–µ–º /notify –Ω–∞ /booking
    const endpoint = isReminder 
      ? backendUrl 
      : backendUrl.replace('/notify', '/booking');
    
    console.log('üìç –í—ã–±—Ä–∞–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç:', endpoint, '(—Ç–∏–ø:', payload.notificationType, ')');

    let requestPayload: Record<string, unknown>;
    
    if (isReminder) {
      // –î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç /notify
      // –û–Ω –æ–∂–∏–¥–∞–µ—Ç: masterId, telegramId, clientName, service (–Ω–∞–∑–≤–∞–Ω–∏–µ), date, time
      const dateTime = new Date(payload.dateTime);
      const date = dateTime.toISOString().split('T')[0]; // YYYY-MM-DD
      const time = dateTime.toTimeString().slice(0, 5); // HH:MM
      
      requestPayload = {
        masterId: String(payload.masterId),
        telegramId: String(payload.clientTelegramId),
        clientName: payload.clientName,
        service: payload.serviceName || '–£—Å–ª—É–≥–∞', // –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        date: date,
        time: time,
        notificationType: 'reminder'
      };
    } else {
      // –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç /booking
      const serviceId = Number(payload.serviceId);
      if (Number.isNaN(serviceId)) {
        throw new Error('serviceId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
      }

      if (!payload.clientPhone) {
        throw new Error('clientPhone –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      }

      requestPayload = {
        clientName: payload.clientName,
        clientPhone: payload.clientPhone,
        clientTelegramId: String(payload.clientTelegramId),
        service: serviceId,
        dateTime: payload.dateTime,
        masterName: payload.masterName,
      };

      if (payload.masterId != null) {
        requestPayload.masterId = String(payload.masterId);
      }
      if (payload.notificationType) {
        requestPayload.notificationType = payload.notificationType;
      }
    }

    const requestBody = JSON.stringify(requestPayload);
    console.log('üìù –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å—Ç—Ä–æ–∫–∞):', requestBody);
    
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: requestBody,
      signal: controller.signal,
    });
    
    clearTimeout(timeoutId);
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞!');
    console.log('üìä HTTP —Å—Ç–∞—Ç—É—Å:', response.status);
    console.log('üìä HTTP —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:', response.statusText);
    console.log('üìä Response OK:', response.ok);
    console.log('üìä Response headers:', Object.fromEntries(response.headers.entries()));

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    let json: any;
    let responseText: string = '';
    try {
      responseText = await response.text();
      console.log('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç):', responseText);
      
      if (responseText) {
        json = JSON.parse(responseText);
        console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', json);
      } else {
        console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞');
        json = {};
      }
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      console.error('üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', responseText);
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –±—ç–∫–µ–Ω–¥–∞: ${response.status} - ${responseText}`);
      }
      return {};
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (!response.ok || json?.success === false) {
      const errorMessage = json?.message || `–û—à–∏–±–∫–∞ –±—ç–∫–µ–Ω–¥–∞: ${response.status}`;
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', errorMessage);
      console.error('‚ùå –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', json);
      throw new Error(errorMessage);
    }

    console.log('‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û!');
    console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', json);
    console.log('üîî'.repeat(40));
    console.log('');
    return json;
  } catch (error: any) {
    clearTimeout(timeoutId);
    console.error('');
    console.error('‚ùå'.repeat(40));
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –û–¢–ü–†–ê–í–ö–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø');
    console.error('‚ùå'.repeat(40));
    console.error('üî¥ –¢–∏–ø –æ—à–∏–±–∫–∏:', error?.name);
    console.error('üî¥ –°–æ–æ–±—â–µ–Ω–∏–µ:', error?.message);
    console.error('üî¥ Stack trace:', error?.stack);
    console.error('üî¥ –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏:', error);
    
    if (error.name === 'AbortError') {
      console.error('‚è±Ô∏è –ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)');
      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      console.error('üåê –ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –∏–ª–∏ CORS');
    }
    
    console.error('‚ùå'.repeat(40));
    console.error('');
    throw error;
  }
}
