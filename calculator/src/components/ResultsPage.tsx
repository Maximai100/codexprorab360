import React, { useMemo, useCallback } from 'react';
import { RoomData, SavedMaterial, MaterialResult, TotalCalculations } from '../types';
import { calculateTotalMetrics } from '../utils/calculations';
import { 
  PlasterCalculator, 
  PuttyCalculator, 
  PaintCalculator, 
  WallpaperCalculator,
  DrywallCalculator,
  TileCalculator,
  LaminateCalculator
} from './calculators';
import { Icon, IconPdf, IconShare } from './common';

interface ResultsPageProps {
  rooms: RoomData[];
  materials: SavedMaterial[];
  materialResults?: Record<string, MaterialResult | null>;
  totalMetrics?: TotalCalculations;
  totalCost?: number;
  onExport?: (format: string) => void;
  showExportControls?: boolean;
}

export const ResultsPage: React.FC<ResultsPageProps> = ({
  rooms,
  materials,
  materialResults = {},
  totalMetrics,
  totalCost = 0,
  onExport,
  showExportControls = true
}) => {
  const [localMaterialResults, setLocalMaterialResults] = React.useState<Record<string, MaterialResult | null>>(materialResults);

  const calculatedTotalMetrics = useMemo(() => {
    return totalMetrics || calculateTotalMetrics(rooms);
  }, [totalMetrics, rooms]);

  const handleResultChange = useCallback((name: string, result: MaterialResult | null) => {
    setLocalMaterialResults(prev => ({
      ...prev,
      [name]: result
    }));
  }, []);

  const calculatedTotalCost = useMemo(() => {
    if (totalCost > 0) return totalCost;
    return Object.values(localMaterialResults).reduce((sum, result) => {
      return sum + (result?.cost || 0);
    }, 0);
  }, [totalCost, localMaterialResults]);

  const handleExport = useCallback((format: string) => {
    if (onExport) {
      onExport(format);
    } else {
      const exportData = {
        rooms,
        materials,
        results: localMaterialResults,
        totalMetrics: calculatedTotalMetrics,
        totalCost: calculatedTotalCost,
        timestamp: new Date().toISOString()
      };
      console.log(`–≠–∫—Å–ø–æ—Ä—Ç –≤ ${format}:`, exportData);
    }
  }, [onExport, rooms, materials, localMaterialResults, calculatedTotalMetrics, calculatedTotalCost]);

  if (rooms.length === 0) {
    return (
      <div className="results-empty">
        <div className="empty-state">
          <h2>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞</h2>
          <p>–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
        </div>
      </div>
    );
  }

  return (
    <div className="results-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º */}
      <div className="results-header">
        <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞</h2>
        {showExportControls && (
          <div className="export-controls">
            <button 
              className="btn-secondary"
              onClick={() => handleExport('pdf')}
              title="–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"
            >
              <IconPdf />
              PDF
            </button>
            <button 
              className="btn-secondary"
              onClick={() => handleExport('excel')}
              title="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"
            >
              üìä Excel
            </button>
            <button 
              className="btn-secondary"
              onClick={() => handleExport('telegram')}
              title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram"
            >
              <IconShare />
              Telegram
            </button>
          </div>
        )}
      </div>

      {/* –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div className="metrics-summary">
        <h3>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h3>
        <div className="metrics-grid">
          <div className="metric-card">
            <div className="metric-value">{calculatedTotalMetrics.totalFloorArea.toFixed(2)}</div>
            <div className="metric-label">–º¬≤</div>
            <div className="metric-description">–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–ª–∞</div>
          </div>
          
          <div className="metric-card">
            <div className="metric-value">{calculatedTotalMetrics.totalNetWallArea.toFixed(2)}</div>
            <div className="metric-label">–º¬≤</div>
            <div className="metric-description">–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω</div>
          </div>
          
          <div className="metric-card">
            <div className="metric-value">{calculatedTotalMetrics.totalPerimeter.toFixed(2)}</div>
            <div className="metric-label">–º</div>
            <div className="metric-description">–ü–µ—Ä–∏–º–µ—Ç—Ä</div>
          </div>
          
          <div className="metric-card">
            <div className="metric-value">{calculatedTotalMetrics.avgHeight.toFixed(2)}</div>
            <div className="metric-label">–º</div>
            <div className="metric-description">–°—Ä–µ–¥–Ω—è—è –≤—ã—Å–æ—Ç–∞</div>
          </div>
        </div>
      </div>

      {/* –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ */}
      <div className="material-calculators">
        <h3>–†–∞—Å—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</h3>
        
        <div className="calculators-grid">
          <PlasterCalculator
            name="–ß–µ—Ä–Ω–æ–≤–∞—è —à—Ç—É–∫–∞—Ç—É—Ä–∫–∞ (–°—Ç–µ–Ω—ã)"
            materials={materials}
            onResultChange={handleResultChange}
            wallArea={calculatedTotalMetrics.totalNetWallArea}
            floorArea={calculatedTotalMetrics.totalFloorArea}
          />
          
          <PlasterCalculator
            name="–ß–µ—Ä–Ω–æ–≤–∞—è —à—Ç—É–∫–∞—Ç—É—Ä–∫–∞ (–ü–æ—Ç–æ–ª–æ–∫)"
            materials={materials}
            onResultChange={handleResultChange}
            wallArea={calculatedTotalMetrics.totalFloorArea}
            floorArea={calculatedTotalMetrics.totalFloorArea}
          />
          
          <PuttyCalculator
            name="–§–∏–Ω–∏—à–Ω–∞—è —à–ø–∞–∫–ª–µ–≤–∫–∞ (–°—Ç–µ–Ω—ã)"
            materials={materials}
            onResultChange={handleResultChange}
            wallArea={calculatedTotalMetrics.totalNetWallArea}
            floorArea={calculatedTotalMetrics.totalFloorArea}
          />
          
          <PuttyCalculator
            name="–§–∏–Ω–∏—à–Ω–∞—è —à–ø–∞–∫–ª–µ–≤–∫–∞ (–ü–æ—Ç–æ–ª–æ–∫)"
            materials={materials}
            onResultChange={handleResultChange}
            wallArea={calculatedTotalMetrics.totalFloorArea}
            floorArea={calculatedTotalMetrics.totalFloorArea}
          />
          
          <DrywallCalculator
            name="–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω (–ö–∞—Ä–∫–∞—Å)"
            materials={materials}
            onResultChange={handleResultChange}
            wallArea={calculatedTotalMetrics.totalNetWallArea}
            floorArea={calculatedTotalMetrics.totalFloorArea}
          />
          
          <PaintCalculator
            name="–ö—Ä–∞—Å–∫–∞ / –ì—Ä—É–Ω—Ç–æ–≤–∫–∞"
            materials={materials}
            onResultChange={handleResultChange}
            wallArea={calculatedTotalMetrics.totalNetWallArea}
            floorArea={calculatedTotalMetrics.totalFloorArea}
          />
          
          <WallpaperCalculator
            name="–û–±–æ–∏"
            materials={materials}
            onResultChange={handleResultChange}
            perimeter={calculatedTotalMetrics.totalPerimeter}
            height={calculatedTotalMetrics.avgHeight}
          />
          
          <TileCalculator
            name="–ü–ª–∏—Ç–∫–∞"
            materials={materials}
            onResultChange={handleResultChange}
            wallArea={calculatedTotalMetrics.totalNetWallArea}
            floorArea={calculatedTotalMetrics.totalFloorArea}
          />
          
          <LaminateCalculator
            name="–õ–∞–º–∏–Ω–∞—Ç / –ù–∞–ø–æ–ª—å–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è"
            materials={materials}
            onResultChange={handleResultChange}
            wallArea={calculatedTotalMetrics.totalNetWallArea}
            floorArea={calculatedTotalMetrics.totalFloorArea}
          />
        </div>
      </div>

      {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å */}
      {calculatedTotalCost > 0 && (
        <div className="total-cost">
          <h3>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</h3>
          <div className="cost-summary">
            <div className="cost-value">{calculatedTotalCost.toFixed(2)} ‚ÇΩ</div>
            <div className="cost-description">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</div>
          </div>
        </div>
      )}
    </div>
  );
};